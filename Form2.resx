<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="ImageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="ImageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj0yLjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAADa
        CQAAAk1TRnQBSQFMAgEBAgEAARgBAAEYAQABFAEAARQBAAT/ARkBAAj/AUIBTQE2BwABNgMAASgDAAFQ
        AwABFAMAAQEBAAEYBQABwAESJwAD/gLtAe8C2QHfAtQB3ALfAeQC9AH1A/8qAAP5A/ulAAP6AcMBxAHR
        ATEBOQF7AQ4BHgGVARUBJgG7ARkBKQHIARgBKQG3ARQBIwGNAV0BYwGSAeAB4QHmA/0hAAFUAcIBVQFg
        AdABYQFuAdoBcwP9nwAC5AHpAT0BSgGNAQkBEgGvAQIBBQHHAgAB0wIAAdoBAAEBAdwCAAHYAQABAQHQ
        AQMBBwHAARIBHQGkAV0BYwGPA/gbAAFcAcIBWgFTAcUBUQFdAc4BXgFqAdgBbgFCAboBSJkAA/8B3AHd
        AeMBIwEuAY0BAgEEAbQBAgEFAcABCQESAbABVQFfAbUBmAGhAcsBrAGzAdABkAGZAckBQwFPAbcBBgEP
        AbgBAQECAbwBBgEQAa4BXAFiAZ4C9gH3FQABYgHBAVsBRQG6AT8BUAHDAU0BWgHLAVoBZgHVAWkBcgHf
        AXgD85YAAvYB9wEoAToBjwIBAaYCAAG1AQIBBQHEASUBNQGTAvIB9AkAA/4CqwHBAQsBGgGXAgABsAEF
        AQ0BpAFVAVsBkwP9DAAD/wFXAbgBTgE4Aa8BLwFCAbcBOwFMAcABSAFWAcgBVQFhAdEBYwFsAdoBcQF4
        AeQBgAP9kAAD/wF9AX8BqwEDAQgBlwECAQUBqAIAAbUCAAHEAQIBBQHOATIBPgGhAuUB6gwAAtsB5AEK
        ARcBkgEBAQIBogEMARYBkwLWAeEJAAP/AUcBrgE7ASwBpQEfATQBrAEqAT4BtAE2AUcBvAFCAVEBxAFO
        AVsBzAFcAWYB1QFpAXEB3gF3AVABvwFXA/+NAALrAe8BBwEUAYUCAAGXARUBHwGVARQBIQGjAQEBAgHC
        AgAB0QECAQUB3gEyATsBpwLyAfUD/wkAAr0B0AEIAQ8BmgECAQQBlAE/AUMBkAP+AwAD/gEzAaMBIwEh
        AZ0BEgEpAaMBGwExAakBJgE5AbABMAFCAbgBPAFiAboBYwFVAccBUwFfAc8BYAFoAdcBbAFyAd8BeAPy
        jQACsAHLAQUBDwGMAQIBBwGWAYcBjAG6At8B6AEWAR4BpQIAAcwCAAHYAQIBBAHaASUBMgGiAukB7wkA
        A/4BRwFPAaUCAAGQAQYBEgGIAuoB7wMAAUwBrAE+AUUBqgE3AR4BmgEPASUBoAEXAS0BpgEgATUBrQEr
        A/wDAAGDAdQBgQFXAckBVwFhAdEBYgFpAdgBbQFxAd4BdwP9igABhAGJAbwBAAEBAYMBBgESAZICzwHe
        AwACzgHeARYBHQGqAQcBCAHPAgYB1gEFAQcB1wE4AT8BqQLpAe8JAAGLAZABwQEBAQIBjQEGARABiQLJ
        AdsD/wFDAacBNAFEAakBNQFFAasBNwEhAZ0BEgEoAaIBGwP9BgAD/gFPAcMBTQFXAckBVwFgAdABYQFn
        AdYBagFHAboBS4oAAXIBeAG1Ah4BlAEbASUBmgLnAe0GAALiAeoBRAFOAcICMwHXAjkB2QFAAUIB2AE3
        AUIBpwLzAfYGAAGqAawBzgEDAQkBiwEEAQ0BhgK0AdIDAAFRAasBRAFDAagBNQFEAakBNwFKAa0BPAP+
        DAABmAHZAZYBTgHCAUsBVgHIAVQBXAHNAVwBYgHSAWQD8ocAAX8BhQG/AkcBrgEsATUBpQLiAeoGAAP+
        At8B6QFkAWoBzAI5AdICNwHQATsBPgHKAUcBTgGtAucB7gMAAaABowHNASwBMAGcARgBIAGRArsB1gMA
        A/8BKwGgASkB5QHtAeUD/xIAAVYBwAFRAUwBwAFIAVEBxAFPAVYByAFWAVsBzAFcA/2EAAGXAZoByQFS
        AVMBtgFDAUsBsgK+AdgMAALjAewBaAFyAdEBRAFFAcwCQQHIAUQBRgHEAUkBTgGvAvMB9gF7AYABwAE4
        ATkBpQFGAU4BsALXAeYhAAHxAfUB8QFSAb4BTQFHAbwBQgFMAcABSAFQAcMBTQE/AbcBQgP/gQACywHg
        AUsBUwG4AVsBXAG8AXUBeQG+DAAD/gLqAfABagFvAcsCTQHFAksBwQFHAUkBuwE0AT0BqgEyATcBpgJH
        Aa4BKgExAakC+AH5JAABkAHUAYsBWAG+AVIBWwHBAVYBXgHEAVkBYAHFAVsD8YEAAvkB+gFAAUcBsAJm
        AcMBSwFPAbYCzAHhA/8MAAHbAdwB6QFMAVABvAFUAVUBwAJVAbwBUgFTAbcBSwFOAbMBTgFQAbUBkQGT
        AconAAP/AVEBuAFJAVQBuwFMAVcBvQFPAVgBvgFRAVkBwAFTA/yBAALQAeUBYgFlAcYCcQHLATYBPQG1
        AtIB5A8AAuIB7QFBAUUBtwJgAb8CXgG9AlwBvAFUAVsBvQLzAfcqAAEfAaUBHgFPAbUBRQFRAbcBRwFR
        AbgBSQFSAbkCSwG4AUkD/34AAvwB/QGBAYIByQFwAXIBzgJ6AdEBVgFZAcEBhAGGAcsC0gHlAvMB9gL5
        AfoC7AHyArgB3AE6ATwBuAFkAWUBxAJpAcYBTQFPAcABwgHDAeAD/i0AAXwBxgF0AUsBsQE/AUwBsgFB
        AU0BtAFDAU0BtAFDA/GBAAP9AYABgQHLAXcBeAHUAYMBhAHXAX4BgAHWAVkBXAHJATgBOgG+AS4BMAG7
        AT4BQAG/AWIBZQHKAncB0AJ1Ac8BYgFjAccBuAG5Ad8zAAP+AUcBrQE6AUcBrgE7AUcBrgE8AUgBrwE8
        AV4BuQFThAAD/ALGAeMBVAFVAcYCjgHdAowB3QKKAdwCiAHaAoYB2QKIAdoBfAF9AdYCWgHHAugB8gP+
        NgABlgHPAY4BRAGqATYBRQGrATcBRAGrATcBSQGtATuKAAL1AfgCwQHjArgB4wK9AeQCxQHnAsgB5wLE
        AeYC2AHrA/w/AAF7AcIBcgFDAagBNAFDAagBNAP65wAD/34AAUIBTQE+BwABPgMAASgDAAFQAwABFAMA
        AQEBAAEBBQAB8BcAA/8BAAH+AQMB/wHzAf8HAAH4AQAB/wHhAf8HAAHwAQABfwHBAf8HAAHAAQABPwGA
        Af8HAAHAAXABHgEAAX8HAAGAATwBHAEAAT8HAAGAAQ4BCAEAAT8HAAGAAQ4CCAEfBwABhAEHAQABGAEf
        BwABhgEDAQgBPAEPBwABhgEBAQgBfgEHBwABhwGAAQ8B/gEDBwABhwGAAQ8B/wEDBwABgQHgAR8B/wEB
        BwABwQHwAR8B/wGABwABwAEAAR8B/wHABwAB4AEAAX8B/wHABwAB8AEAAX8B/wHgBwAB/AEBAv8B8AcA
        BP8B+wcACw==
</value>
  </data>
</root>